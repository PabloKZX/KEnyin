#type vertex
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;
layout (location = 2) in vec3 aNormal;

out vec2 vTexCoord;
out vec3 vNormal;
out vec3 vFragPos;

uniform mat4 uModel;
uniform mat4 uViewProjection;

void main()
{
    vTexCoord = aTexCoord;
    vNormal = mat3(transpose(inverse(uModel))) * aNormal;
    vFragPos = vec3(uModel * vec4(aPos, 1.0f));
    gl_Position = uViewProjection * uModel * vec4(aPos, 1.0);
}

#type fragment
#version 330 core
out vec4 fragColor;

in vec2 vTexCoord;
in vec3 vNormal;
in vec3 vFragPos;

uniform sampler2D uTexture1;
uniform sampler2D uTexture2;

uniform vec3 uObjectColor;
uniform vec3 uLightColor;
uniform vec3 uLightPos;
uniform vec3 uViewPos;

void main()
{
    // ambient lighting
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * uLightColor;
    
    // diffuse lighting
    vec3 normal = normalize(vNormal);
    vec3 lightingDir = normalize(uLightPos - vFragPos);
    float diff = max(dot(normal, lightingDir), 0.0f);
    vec3 diffuse = diff * uLightColor;
    
    // specular lighting
    float specularStrength = 0.5;
    vec3 viewDir = normalize(uViewPos - vFragPos);
    vec3 reflectDir = reflect(-lightingDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * uLightColor;
    
    vec3 lightingResult = (ambient + diffuse + specular) * uObjectColor;

    vec4 textureSample = mix(texture(uTexture1, vTexCoord), texture(uTexture2, vTexCoord), 0.2);
    fragColor = vec4(lightingResult, 1.0);
}
