#type vertex
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;
layout (location = 2) in vec3 aNormal;

out vec2 vTexCoords;
out vec3 vNormal;
out vec3 vFragPos;

uniform mat4 uModel;
uniform mat4 uViewProjection;

void main()
{
    vTexCoords = aTexCoords;
    vNormal = mat3(transpose(inverse(uModel))) * aNormal;
    vFragPos = vec3(uModel * vec4(aPos, 1.0f));
    gl_Position = uViewProjection * vec4(vFragPos, 1.0);
}

#type fragment
#version 330 core
out vec4 fragColor;

in vec2 vTexCoords;
in vec3 vNormal;
in vec3 vFragPos;

struct Material
{
    vec3 color;
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct Light
{
    vec3 position;
    vec3 direction;
    vec3 color;

    float range;
    float linearAttenuation;
    float quadraticAttenuation;
    float innerAngle;
    float outerAngle;
};

uniform Material material;

uniform Light light;
uniform vec3 uViewPos;
uniform int lightType;

vec3 CalcDirLight(Light light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
    vec3 normal = normalize(vNormal);
    vec3 viewDir = normalize(uViewPos - vFragPos);

    vec3 result = vec3(0.0);
    if(lightType == 0)
    {
        result += CalcDirLight(light, normal, viewDir);
    }

    if(lightType == 1)
    {
        result += CalcPointLight(light, normal, vFragPos, viewDir);
    }

    if(lightType == 2)
    {
        result += CalcSpotLight(light, normal, vFragPos, viewDir);
    }

    fragColor = vec4(result, 1.0);
}

vec3 CalcDirLight(Light light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // combine results
    vec3 ambient  = light.color * 0.1;
    vec3 diffuse  = light.color * diff * vec3(texture(material.diffuse, vTexCoords));
    vec3 specular = light.color * spec * vec3(texture(material.specular, vTexCoords));
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (1.0 + light.linearAttenuation * distance +
                 light.quadraticAttenuation * (distance * distance));

    // combine results
    vec3 ambient  = light.color * 0.1;
    vec3 diffuse  = light.color * diff * texture(material.diffuse, vTexCoords).rgb;
    vec3 specular = light.color * spec * texture(material.specular, vTexCoords).rgb;
    return (ambient + diffuse + specular) * attenuation;
}

vec3 CalcSpotLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);

    // spotlight (soft edges)
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = (light.innerAngle - light.outerAngle);
    float intensity = clamp((theta - light.outerAngle) / epsilon, 0.0, 1.0);

    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (1.0 + light.linearAttenuation * distance +
                 light.quadraticAttenuation * (distance * distance));

    // combine results
    vec3 ambient  = light.color * 0.1;
    vec3 diffuse  = light.color * diff * texture(material.diffuse, vTexCoords).rgb * attenuation * intensity;
    vec3 specular = light.color * spec * texture(material.specular, vTexCoords).rgb * attenuation * intensity;

    return ambient + diffuse + specular;
}